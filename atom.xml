<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>二话不说的博客</title>
  
  <subtitle>『时间的洗礼，岁月的积淀』</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://erhua.github.io/"/>
  <updated>2019-03-19T13:04:19.791Z</updated>
  <id>https://erhua.github.io/</id>
  
  <author>
    <name>二话不说</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python从内存字符串导入</title>
    <link href="https://erhua.github.io/2019/03/19/python%E4%BB%8E%E5%86%85%E5%AD%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%BC%E5%85%A5/"/>
    <id>https://erhua.github.io/2019/03/19/python从内存字符串导入/</id>
    <published>2019-03-19T13:04:19.000Z</published>
    <updated>2019-03-19T13:04:19.791Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试整理</title>
    <link href="https://erhua.github.io/2019/03/19/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>https://erhua.github.io/2019/03/19/面试整理/</id>
    <published>2019-03-19T12:49:50.000Z</published>
    <updated>2019-03-19T12:49:50.309Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://erhua.github.io/2019/03/19/hello-world/"/>
    <id>https://erhua.github.io/2019/03/19/hello-world/</id>
    <published>2019-03-19T12:37:11.032Z</published>
    <updated>2019-03-19T12:37:11.033Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式(C++)学习</title>
    <link href="https://erhua.github.io/2018/06/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-C-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://erhua.github.io/2018/06/03/设计模式-C-学习/</id>
    <published>2018-06-03T07:08:22.000Z</published>
    <updated>2019-03-19T12:37:11.036Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>广告的双引擎回归测试</title>
    <link href="https://erhua.github.io/2018/04/10/%E5%B9%BF%E5%91%8A%E7%9A%84%E5%8F%8C%E5%BC%95%E6%93%8E%E5%9B%9E%E5%BD%92%E6%B5%8B%E8%AF%95/"/>
    <id>https://erhua.github.io/2018/04/10/广告的双引擎回归测试/</id>
    <published>2018-04-10T14:10:48.000Z</published>
    <updated>2019-03-19T12:37:11.034Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>排序算法学习（持续更新）</title>
    <link href="https://erhua.github.io/2018/04/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://erhua.github.io/2018/04/08/排序算法/</id>
    <published>2018-04-08T10:07:30.000Z</published>
    <updated>2019-03-19T12:37:11.036Z</updated>
    
    <content type="html"><![CDATA[<p>常用排查算法学习笔记，所有算法均通过c++来实现，持续更新中，计划每周实现一种排序算法。</p><hr><h2 id="基础排序【选择、冒泡、快排】"><a href="#基础排序【选择、冒泡、快排】" class="headerlink" title="基础排序【选择、冒泡、快排】"></a>基础排序【选择、冒泡、快排】</h2><pre><code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> seh &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> CSort::Swap(<span class="keyword">int</span> *left, <span class="keyword">int</span> *right) &#123;</span><br><span class="line">    <span class="keyword">auto</span> tmp = *left;</span><br><span class="line">    *left = *right;</span><br><span class="line">    *right = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里如果不允许申请额外的空间，那么如何交换两个变量的值？</span></span><br><span class="line">    <span class="comment">// 记得以前面试的时候被问到过,我们可以通过运算的方式来实现</span></span><br><span class="line">    <span class="comment">// *left = *left + *right;</span></span><br><span class="line">    <span class="comment">// *right = *left - *right;</span></span><br><span class="line">    <span class="comment">// *left = *left - *right;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  选择排序原理：选出一个最小值放在最前面，然后从下一个位置开始</span></span><br><span class="line"><span class="comment">  再选择一个最小值放在当前位置，以此类推，直到所有位置都遍历完</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">void</span> CSort::SelectSort(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> j = i + <span class="number">1</span>; j &lt; size; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; <span class="built_in">array</span>[j]) &#123;</span><br><span class="line">          Swap(<span class="built_in">array</span> + i, <span class="built_in">array</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  冒泡排序原理：每次比较相邻的两个数，把大的数调到后面，依次比较，</span></span><br><span class="line"><span class="comment">  直至把最大的数移到最后，最后将剩下的数据继续以上操作</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">void</span> CSort::BubbleSort(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> j = <span class="number">0</span>; j + <span class="number">1</span> &lt; size - i; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          Swap(<span class="built_in">array</span> + j, <span class="built_in">array</span> + j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  快速排序原理：分治法</span></span><br><span class="line"><span class="comment">  首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，</span></span><br><span class="line"><span class="comment">  然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，</span></span><br><span class="line"><span class="comment">  这个过程称为一趟快速排序，然后进行递归调用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">void</span> CSort::QuickSort(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size) &#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> key = <span class="built_in">array</span>[<span class="number">0</span>]; <span class="comment">// 保留关键数据，然后把key的位置好空出来</span></span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> height = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; height) &#123;</span><br><span class="line">      <span class="comment">// 从右到左查询小于key的位置</span></span><br><span class="line">      <span class="keyword">while</span> (height &gt; low &amp;&amp; <span class="built_in">array</span>[height] &gt; key) &#123;</span><br><span class="line">        --height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 把找到的小于key的值放进最前面的位置array[0]，array[0]的值前面已备份</span></span><br><span class="line">      <span class="comment">// 这样array[height]的位置就空出来了，后面就可以存放大于于key的数据</span></span><br><span class="line">      <span class="built_in">array</span>[low] = <span class="built_in">array</span>[height];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 从左到右查找大于key的位置</span></span><br><span class="line">      <span class="keyword">while</span> (low &lt; height &amp;&amp; <span class="built_in">array</span>[low] &lt;= key) &#123;</span><br><span class="line">        ++low;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 找到大于key的数据时，就可以放在上面空出来的array[height]位置</span></span><br><span class="line">      <span class="comment">// 之后array[low]的位置就又空出来，用于存放下次小于key的数据</span></span><br><span class="line">      <span class="built_in">array</span>[height] = <span class="built_in">array</span>[low];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>[low] = key; <span class="comment">// 当low=height时退出循环，low的位置就会空出来，用于存放key</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    退出循环后，整个数组就已经基于Key做完了一次排序，整个数组分成三个部分，小于key</span></span><br><span class="line"><span class="comment">    的部分，key，大于key的部分，然后采用分治法，对于小于key和大于key的部分继续递归调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    QuickSort(<span class="built_in">array</span>, low);</span><br><span class="line">    QuickSort(<span class="built_in">array</span> + low + <span class="number">1</span>, size - low - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre><code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">const</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">array</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先把要排序的元素保存在一个临时变量中，然后在已排好序的部分，查找元素的位置，最后插入进去</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size; i++)</span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">array</span>[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i<span class="number">-1</span>; j&gt;=<span class="number">0</span> &amp;&amp; tmp &lt; <span class="built_in">array</span>[j];j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[j+<span class="number">1</span>] = <span class="built_in">array</span>[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[j+<span class="number">1</span>] =tmp ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用排查算法学习笔记，所有算法均通过c++来实现，持续更新中，计划每周实现一种排序算法。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;基础排序【选择、冒泡、快排】&quot;&gt;&lt;a href=&quot;#基础排序【选择、冒泡、快排】&quot; class=&quot;headerlink&quot; title=&quot;基础排序【选择
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://erhua.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>summming-up</title>
    <link href="https://erhua.github.io/2018/04/05/summming-up/"/>
    <id>https://erhua.github.io/2018/04/05/summming-up/</id>
    <published>2018-04-05T05:19:16.000Z</published>
    <updated>2019-03-19T12:37:11.033Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>持续发布</title>
    <link href="https://erhua.github.io/2018/03/14/%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83/"/>
    <id>https://erhua.github.io/2018/03/14/持续发布/</id>
    <published>2018-03-14T03:33:28.000Z</published>
    <updated>2019-03-19T12:37:11.033Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>placeholder</title>
    <link href="https://erhua.github.io/2017/11/21/placeholder/"/>
    <id>https://erhua.github.io/2017/11/21/placeholder/</id>
    <published>2017-11-21T11:08:36.000Z</published>
    <updated>2019-03-19T12:37:11.035Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>值得推荐的C C++框架和库</title>
    <link href="https://erhua.github.io/2017/09/22/cplusplus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://erhua.github.io/2017/09/22/cplusplus学习笔记/</id>
    <published>2017-09-22T09:45:05.000Z</published>
    <updated>2019-03-19T12:37:11.035Z</updated>
    
    <content type="html"><![CDATA[<p>文章出处：<a href="http://blog.csdn.net/xiaoxiaoyeyaya/article/details/42541419" target="_blank" rel="noopener">http://blog.csdn.net/xiaoxiaoyeyaya/article/details/42541419</a></p><h2 id="1-Webbench"><a href="#1-Webbench" class="headerlink" title="- 1. Webbench"></a><a name="t1" target="_blank"></a>- 1. Webbench</h2><p>Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。Webbench使用C语言编写, 代码实在太简洁，源码加起来不到600行。</p><p>下载链接：<a href="http://home.tiscali.cz/~cz210552/webbench.html" target="_blank" rel="noopener">http://home.tiscali.cz/~cz210552/webbench.html</a></p><h2 id="2-Tinyhttpd"><a href="#2-Tinyhttpd" class="headerlink" title="- 2. Tinyhttpd"></a><a name="t2" target="_blank"></a>- 2. Tinyhttpd</h2><p>tinyhttpd是一个超轻量型Http Server，使用C语言开发，全部代码只有502行(包括注释)，附带一个简单的Client，可以通过阅读这段代码理解一个 Http Server 的本质。</p><p>下载链接：<a href="http://sourceforge.net/projects/tinyhttpd/" target="_blank" rel="noopener">http://sourceforge.net/projects/tinyhttpd/</a></p><h2 id="3-cJSON"><a href="#3-cJSON" class="headerlink" title="- 3. cJSON"></a><a name="t3" target="_blank"></a>- 3. cJSON</h2><p>cJSON是C语言中的一个JSON编解码器，非常轻量级，C文件只有500多行，速度也非常理想。</p><p>cJSON也存在几个弱点，虽然功能不是非常强大，但cJSON的小身板和速度是最值得赞赏的。其代码被非常好地维护着，结构也简单易懂，可以作为一个非常好的C语言项目进行学习。</p><p>项目主页:<a href="http://sourceforge.net/projects/cjson/" target="_blank" rel="noopener">http://sourceforge.net/projects/cjson/</a></p><h2 id="4-CMockery"><a href="#4-CMockery" class="headerlink" title="- 4. CMockery"></a><a name="t4" target="_blank"></a>- 4. CMockery</h2><p>cmockery是google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。cmockery的源代码行数不到3K，你阅读一下will_return和mock的源代码就一目了然了。</p><p>主要特点：</p><ul><li>免费且开源，google提供技术支持；</li><li>轻量级的框架，使测试更加快速简单；</li><li>避免使用复杂的编译器特性，对老版本的编译器来讲，兼容性好;</li><li>并不强制要求待测代码必须依赖C99标准，这一特性对许多嵌入式系统的开发很有用</li></ul><p>下载链接：<a href="http://code.google.com/p/cmockery/downloads/list" target="_blank" rel="noopener">http://code.google.com/p/cmockery/downloads/list</a></p><h2 id="5-Libev"><a href="#5-Libev" class="headerlink" title="- 5. Libev"></a><a name="t5" target="_blank"></a>- 5. Libev</h2><p>libev是一个开源的事件驱动库，基于epoll，kqueue等OS提供的基础设施。其以高效出名，它可以将IO事件，定时器，和信号统一起来，统一放在事件处理这一套框架下处理。基于Reactor模式，效率较高，并且代码精简（4.15版本8000多行），是学习事件驱动编程的很好的资源。</p><p>下载链接：<a href="http://software.schmorp.de/pkg/libev.html" target="_blank" rel="noopener">http://software.schmorp.de/pkg/libev.html</a></p><h2 id="6-Memcached"><a href="#6-Memcached" class="headerlink" title="- 6. Memcached"></a><a name="t6" target="_blank"></a>- 6. Memcached</h2><p>Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态数据库驱动网站的速度。Memcached 基于一个存储键/值对的 hashmap。Memcached-1.4.7的代码量还是可以接受的，只有10K行左右。</p><p>下载地址：<a href="http://memcached.org/" target="_blank" rel="noopener">http://memcached.org/</a></p><h2 id="7-Lua"><a href="#7-Lua" class="headerlink" title="- 7. Lua"></a><a name="t7" target="_blank"></a>- 7. Lua</h2><p>Lua很棒，Lua是巴西人发明的，这些都令我不爽，但是还不至于脸红，最多眼红。</p><p>让我脸红的是Lua的源代码，百分之一百的ANSI C，一点都不掺杂。在任何支持ANSI C编译器的平台上都可以轻松编译通过。我试过，真是一点废话都没有。Lua的代码数量足够小，5.1.4仅仅1.5W行，去掉空白行和注释估计能到1W行。</p><p>下载地址：<a href="http://www.lua.org/" target="_blank" rel="noopener">http://www.lua.org/</a></p><h2 id="8-SQLite"><a href="#8-SQLite" class="headerlink" title="- 8. SQLite"></a><a name="t8" target="_blank"></a>- 8. SQLite</h2><p>SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大致3万行C代码，250K。</p><p>下载地址：<a href="http://www.sqlite.org/" target="_blank" rel="noopener">http://www.sqlite.org/</a> 。</p><h2 id="9-UNIX-v6"><a href="#9-UNIX-v6" class="headerlink" title="- 9. UNIX v6"></a><a name="t9" target="_blank"></a>- 9. UNIX v6</h2><p>UNIX V6 的内核源代码包括设备驱动程序在内 约有1 万行，这个数量的源代码，初学者是能够充分理解的。有一种说法是一个人所能理解的代码量上限为1 万行，UNIX V6的内核源代码从数量上看正好在这个范围之内。看到这里，大家是不是也有“如果只有1万行的话没准儿我也能学会”的想法呢？</p><p>另一方面，最近的操作系统，例如Linux 最新版的内核源代码据说超过了1000 万行。就算不是初学者，想完全理解全部代码基本上也是不可能的。</p><p>下载地址：<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6" target="_blank" rel="noopener">http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6</a></p><h2 id="10-NETBSD"><a href="#10-NETBSD" class="headerlink" title="- 10. NETBSD"></a><a name="t10" target="_blank"></a>- 10. NETBSD</h2><p>NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统，可以在许多平台上执行，从 64bit alpha 服务器到手持设备和嵌入式设备。NetBSD计划的口号是：”Of course it runs NetBSD”。它设计简洁，代码规范，拥有众多先进特性，使得它在业界和学术界广受好评。由于简洁的设计和先进的特征，使得它在生产和研究方面，都有卓越的表现，而且它也有受使用者支持的完整的源代码。许多程序都可以很容易地通过NetBSD Packages Collection获得。</p><p>下载地址：<a href="http://www.netbsd.org/" target="_blank" rel="noopener">http://www.netbsd.org/</a></p><a id="more"></a><h2 id="C-资源大全"><a href="#C-资源大全" class="headerlink" title="C++ 资源大全"></a><a name="t11" target="_blank"></a>C++ 资源大全</h2><p>关于 C++ 框架、库和资源的一些汇总列表，内容包括：标准库、Web应用框架、人工智能、数据库、图片处理、机器学习、日志、代码分析等。</p><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a><a name="t12" target="_blank"></a>标准库</h3><p>C++标准库，包括了STL容器，算法和函数等。</p><ul><li><a href="http://en.wikipedia.org/wiki/C%2B%2B_Standard_Library" target="_blank" rel="noopener">C++ Standard Library</a>：是一系列类和函数的集合，使用核心语言编写，也是C++ISO自身标准的一部分。</li><li><a href="http://en.wikipedia.org/wiki/Standard_Template_Library" target="_blank" rel="noopener">Standard Template Library</a>：标准模板库</li><li><a href="http://en.wikipedia.org/wiki/C_POSIX_library" target="_blank" rel="noopener">C POSIX library</a> ： POSIX系统的C标准库规范</li><li><a href="https://github.com/cplusplus" target="_blank" rel="noopener">ISO C++ Standards Committee</a> ：C++标准委员会</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a><a name="t13" target="_blank"></a>框架</h3><p>C++通用框架和库</p><ul><li><a href="http://stdcxx.apache.org/" target="_blank" rel="noopener">Apache C++ Standard Library</a>：是一系列算法，容器，迭代器和其他基本组件的集合</li><li><a href="http://stlab.adobe.com/" target="_blank" rel="noopener">ASL</a> ：Adobe源代码库提供了同行的评审和可移植的C++源代码库。</li><li><a href="https://github.com/boostorg" target="_blank" rel="noopener">Boost</a> ：大量通用C++库的集合。</li><li><a href="https://github.com/bloomberg/bde" target="_blank" rel="noopener">BDE</a> ：来自于彭博资讯实验室的开发环境。</li><li><a href="http://libcinder.org/" target="_blank" rel="noopener">Cinder</a>：提供专业品质创造性编码的开源开发社区。</li><li><a href="http://ryan.gulix.cl/fossil.cgi/cxxomfort/" target="_blank" rel="noopener">Cxxomfort</a>：轻量级的，只包含头文件的库，将C++ 11的一些新特性移植到C++03中。</li><li><a href="http://dlib.net/" target="_blank" rel="noopener">Dlib</a>：使用契约式编程和现代C++科技设计的通用的跨平台的C++库。</li><li><a href="https://github.com/paulhodge/EASTL" target="_blank" rel="noopener">EASTL</a> ：EA-STL公共部分</li><li><a href="https://github.com/sumeetchhetri/ffead-cpp" target="_blank" rel="noopener">ffead-cpp</a> ：企业应用程序开发框架</li><li><a href="https://github.com/facebook/folly" target="_blank" rel="noopener">Folly</a>：由Facebook开发和使用的开源C++库</li><li><a href="https://github.com/julianstorer/JUCE" target="_blank" rel="noopener">JUCE</a> ：包罗万象的C++类库，用于开发跨平台软件</li><li><a href="https://github.com/facebook/libphenom" target="_blank" rel="noopener">libPhenom</a>：用于构建高性能和高度可扩展性系统的事件框架。</li><li><a href="https://github.com/sourcey/libsourcey" target="_blank" rel="noopener">LibSourcey</a> ：用于实时的视频流和高性能网络应用程序的C++11 evented IO</li><li><a href="https://github.com/koanlogic/libu" target="_blank" rel="noopener">LibU</a> ： C语言写的多平台工具库</li><li><a href="http://loki-lib.sourceforge.net/" target="_blank" rel="noopener">Loki</a> ：C++库的设计，包括常见的设计模式和习语的实现。</li><li><a href="https://code.google.com/p/mili/" target="_blank" rel="noopener">MiLi</a> ：只含头文件的小型C++库</li><li><a href="http://www.openframeworks.cc/" target="_blank" rel="noopener">openFrameworks</a> ：开发C++工具包，用于创意性编码。</li><li><a href="http://qt-project.org/" target="_blank" rel="noopener">Qt</a> ：跨平台的应用程序和用户界面框架</li><li><a href="http://code.google.com/p/reason/" target="_blank" rel="noopener">Reason</a> ：跨平台的框架，使开发者能够更容易地使用Java，.Net和Python，同时也满足了他们对C++性能和优势的需求。</li><li><a href="http://root.cern.ch/" target="_blank" rel="noopener">ROOT</a> ：具备所有功能的一系列面向对象的框架，能够非常高效地处理和分析大量的数据，为欧洲原子能研究机构所用。</li><li><a href="http://www.stlport.org/" target="_blank" rel="noopener">STLport</a>：是STL具有代表性的版本</li><li><a href="http://stxxl.sourceforge.net/" target="_blank" rel="noopener">STXXL</a>：用于额外的大型数据集的标准模板库。</li><li><a href="http://www.ultimatepp.org/" target="_blank" rel="noopener">Ultimate++</a> ：C++跨平台快速应用程序开发框架</li><li><a href="http://sourceforge.net/projects/wtl/" target="_blank" rel="noopener">Windows Template Library</a>：用于开发Windows应用程序和UI组件的C++库</li><li><a href="https://github.com/jll63/yomm11" target="_blank" rel="noopener">Yomm11</a> ：C++11的开放multi-methods.</li></ul><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a><a name="t14" target="_blank"></a>人工智能</h3><ul><li><a href="https://github.com/aigamedev/btsk" target="_blank" rel="noopener">btsk</a> ：游戏行为树启动器工具</li><li><a href="http://eodev.sourceforge.net/" target="_blank" rel="noopener">Evolving Objects</a>：基于模板的，ANSI C++演化计算库，能够帮助你非常快速地编写出自己的随机优化算法。</li><li><a href="https://github.com/andrometa/neu" target="_blank" rel="noopener">Neu</a>：C++11框架，编程语言集，用于创建人工智能应用程序的多用途软件系统。</li></ul><h3 id="异步事件循环"><a href="#异步事件循环" class="headerlink" title="异步事件循环"></a><a name="t15" target="_blank"></a>异步事件循环</h3><ul><li><a href="http://think-async.com/" target="_blank" rel="noopener">Boost.Asio</a>：用于网络和底层I/O编程的跨平台的C++库。</li><li><a href="http://libev.schmorp.de/" target="_blank" rel="noopener">libev</a> ：功能齐全，高性能的时间循环，轻微地仿效libevent，但是不再像libevent一样有局限性，也修复了它的一些bug。</li><li><a href="http://libevent.org/" target="_blank" rel="noopener">libevent</a> ：事件通知库</li><li><a href="https://github.com/joyent/libuv" target="_blank" rel="noopener">libuv</a> ：跨平台异步I/O。</li></ul><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a><a name="t16" target="_blank"></a>音频</h3><p>音频，声音，音乐，数字化音乐库</p><ul><li><a href="http://www.fmod.org/" target="_blank" rel="noopener">FMOD</a> ：易于使用的跨平台的音频引擎和音频内容的游戏创作工具。</li><li><a href="https://github.com/micknoise/Maximilian" target="_blank" rel="noopener">Maximilian</a> ：C++音频和音乐数字信号处理库</li><li><a href="http://www.openal.org/" target="_blank" rel="noopener">OpenAL</a> ：开源音频库—跨平台的音频API</li><li><a href="http://opus-codec.org/" target="_blank" rel="noopener">Opus</a>：一个完全开放的，免版税的，高度通用的音频编解码器</li><li><a href="http://www.speex.org/" target="_blank" rel="noopener">Speex</a>：免费编解码器，为Opus所废弃</li><li><a href="https://github.com/TonicAudio/Tonic" target="_blank" rel="noopener">Tonic</a>： C++易用和高效的音频合成</li><li><a href="http://xiph.org/vorbis/" target="_blank" rel="noopener">Vorbis</a>： Ogg Vorbis是一种完全开放的，非专有的，免版税的通用压缩音频格式。</li></ul><h3 id="生态学"><a href="#生态学" class="headerlink" title="生态学"></a><a name="t17" target="_blank"></a>生态学</h3><p>生物信息，基因组学和生物技术</p><ul><li><a href="http://molpopgen.github.io/libsequence/" target="_blank" rel="noopener">libsequence</a>：用于表示和分析群体遗传学数据的C++库。</li><li><a href="http://www.seqan.de/" target="_blank" rel="noopener">SeqAn</a>：专注于生物数据序列分析的算法和数据结构。</li><li><a href="https://github.com/ekg/vcflib" target="_blank" rel="noopener">Vcflib</a> ：用于解析和处理VCF文件的C++库</li><li><a href="https://github.com/jewmanchue/wham" target="_blank" rel="noopener">Wham</a>：直接把联想测试应用到BAM文件的基因结构变异。</li></ul><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a><a name="t18" target="_blank"></a>压缩</h3><p>压缩和归档库</p><ul><li><a href="http://www.bzip.org/" target="_blank" rel="noopener">bzip2</a>：一个完全免费，免费专利和高质量的数据压缩</li><li><a href="https://bitbucket.org/attila_afra/doboz/overview" target="_blank" rel="noopener">doboz</a>：能够快速解压缩的压缩库</li><li><a href="https://icculus.org/physfs/" target="_blank" rel="noopener">PhysicsFS</a>：对各种归档提供抽象访问的库，主要用于视频游戏，设计灵感部分来自于Quake3的文件子系统。</li><li><a href="https://projects.kde.org/projects/frameworks/karchive" target="_blank" rel="noopener">KArchive</a>：用于创建，读写和操作文件档案（例如zip和 tar）的库，它通过QIODevice的一系列子类，使用gzip格式，提供了透明的压缩和解压缩的数据。</li><li><a href="https://code.google.com/p/lz4/" target="_blank" rel="noopener">LZ4</a> ：非常快速的压缩算法</li><li><a href="https://code.google.com/p/lzham/" target="_blank" rel="noopener">LZHAM</a> ：无损压缩数据库，压缩比率跟LZMA接近，但是解压缩速度却要快得多。</li><li><a href="http://www.7-zip.org/sdk.html" target="_blank" rel="noopener">LZMA</a> ：7z格式默认和通用的压缩方法。</li><li><a href="http://www.matcode.com/lzmat.htm" target="_blank" rel="noopener">LZMAT</a> ：及其快速的实时无损数据压缩库</li><li><a href="https://code.google.com/p/miniz/" target="_blank" rel="noopener">miniz</a>：单一的C源文件，紧缩/膨胀压缩库，使用zlib兼容API，ZIP归档读写，PNG写方式。</li><li><a href="https://github.com/nmoinvaz/minizip" target="_blank" rel="noopener">Minizip</a>：Zlib最新bug修复，支持PKWARE磁盘跨越，AES加密和IO缓冲。</li><li><a href="https://code.google.com/p/snappy/" target="_blank" rel="noopener">Snappy</a> ：快速压缩和解压缩</li><li><a href="http://zlib.net/" target="_blank" rel="noopener">ZLib</a> ：非常紧凑的数据流压缩库</li><li><a href="http://zziplib.sourceforge.net/" target="_blank" rel="noopener">ZZIPlib</a>：提供ZIP归档的读权限。</li></ul><h3 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a><a name="t19" target="_blank"></a>并发性</h3><p>并发执行和多线程</p><ul><li><a href="https://github.com/kylelutz/compute" target="_blank" rel="noopener">Boost.Compute</a> ：用于OpenCL的C++GPU计算库</li><li><a href="https://github.com/HSA-Libraries/Bolt" target="_blank" rel="noopener">Bolt</a> ：针对GPU进行优化的C++模板库</li><li><a href="https://github.com/schlangster/cpp.react" target="_blank" rel="noopener">C++React</a> ：用于C++11的反应性编程库</li><li><a href="https://www.threadingbuildingblocks.org/" target="_blank" rel="noopener">Intel TBB</a> ：Intel线程构件块</li><li><a href="https://github.com/libclsph/libclsph" target="_blank" rel="noopener">Libclsph</a>：基于OpenCL的GPU加速SPH流体仿真库</li><li><a href="https://www.khronos.org/opencl/" target="_blank" rel="noopener">OpenCL</a> ：并行编程的异构系统的开放标准</li><li><a href="http://openmp.org/" target="_blank" rel="noopener">OpenMP</a>：OpenMP API</li><li><a href="http://thrust.github.io/" target="_blank" rel="noopener">Thrust</a> ：类似于C++标准模板库的并行算法库</li><li><a href="https://github.com/STEllAR-GROUP/hpx/" target="_blank" rel="noopener">HPX</a> ：用于任何规模的并行和分布式应用程序的通用C++运行时系统</li><li><a href="https://github.com/ddemidov/vexcl" target="_blank" rel="noopener">VexCL</a> ：用于OpenCL/CUDA 的C++向量表达式模板库。</li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a><a name="t20" target="_blank"></a>容器</h3><ul><li><a href="https://code.google.com/p/cpp-btree/" target="_blank" rel="noopener">C++ B-tree</a> ：基于B树数据结构，实现命令内存容器的模板库</li><li><a href="https://github.com/goossaert/hashmap" target="_blank" rel="noopener">Hashmaps</a>： C++中开放寻址哈希表算法的实现</li></ul><h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a><a name="t21" target="_blank"></a>密码学</h3><ul><li><a href="http://bcrypt.sourceforge.net/" target="_blank" rel="noopener">Bcrypt</a> ：一个跨平台的文件加密工具，加密文件可以移植到所有可支持的操作系统和处理器中。</li><li><a href="https://github.com/fffaraz/awesome-cpp/blob/master" target="_blank" rel="noopener">BeeCrypt</a>：</li><li><a href="http://botan.randombit.net/" target="_blank" rel="noopener">Botan</a>： C++加密库</li><li><a href="http://www.cryptopp.com/" target="_blank" rel="noopener">Crypto++</a>：一个有关加密方案的免费的C++库</li><li><a href="https://www.gnupg.org/" target="_blank" rel="noopener">GnuPG</a>： OpenPGP标准的完整实现</li><li><a href="http://www.gnutls.org/" target="_blank" rel="noopener">GnuTLS</a> ：实现了SSL，TLS和DTLS协议的安全通信库</li><li><a href="http://www.gnu.org/software/libgcrypt/" target="_blank" rel="noopener">Libgcrypt</a></li><li><a href="https://github.com/fffaraz/awesome-cpp/blob/master" target="_blank" rel="noopener">libmcrypt</a></li><li><a href="http://www.libressl.org/" target="_blank" rel="noopener">LibreSSL</a>：免费的SSL/TLS协议，属于2014 OpenSSL的一个分支</li><li><a href="https://github.com/libtom/libtomcrypt" target="_blank" rel="noopener">LibTomCrypt</a>：一个非常全面的，模块化的，可移植的加密工具</li><li><a href="https://github.com/jedisct1/libsodium" target="_blank" rel="noopener">libsodium</a>：基于NaCI的加密库，固执己见，容易使用</li><li><a href="http://www.lysator.liu.se/~nisse/nettle/" target="_blank" rel="noopener">Nettle</a> 底层的加密库</li><li><a href="http://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> ： 一个强大的，商用的，功能齐全的，开放源代码的加密库。</li><li><a href="https://github.com/kokke/tiny-AES128-C" target="_blank" rel="noopener">Tiny AES128 in C</a> ：用C实现的一个小巧，可移植的实现了AES128ESB的加密算法</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><a name="t22" target="_blank"></a>数据库</h3><p>数据库，SQL服务器，ODBC驱动程序和工具</p><ul><li><a href="https://github.com/paulftw/hiberlite" target="_blank" rel="noopener">hiberlite</a> ：用于Sqlite3的C++对象关系映射</li><li><a href="https://github.com/redis/hiredis" target="_blank" rel="noopener">Hiredis</a>： 用于Redis数据库的很简单的C客户端库</li><li><a href="https://github.com/google/leveldb" target="_blank" rel="noopener">LevelDB</a>： 快速键值存储库</li><li><a href="http://symas.com/mdb/" target="_blank" rel="noopener">LMDB</a>：符合数据库四大基本元素的嵌入键值存储</li><li><a href="http://www.tangentsoft.net/mysql++/" target="_blank" rel="noopener">MySQL++</a>：封装了MySql的C API的C++ 包装器</li><li><a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">RocksDB</a>：来自Facebook的嵌入键值的快速存储</li><li><a href="http://www.sqlite.org/" target="_blank" rel="noopener">SQLite</a>：一个完全嵌入式的，功能齐全的关系数据库，只有几百KB，可以正确包含到你的项目中。</li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a><a name="t23" target="_blank"></a>调试</h3><p>调试库， 内存和资源泄露检测，单元测试</p><ul><li><a href="http://www.boost.org/doc/libs/master/libs/test/doc/html/index.html" target="_blank" rel="noopener">Boost.Test</a>：Boost测试库</li><li><a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a>：一个很时尚的，C++原生的框架，只包含头文件，用于单元测试，测试驱动开发和行为驱动开发。</li><li><a href="http://www.freedesktop.org/wiki/Software/cppunit/" target="_blank" rel="noopener">CppUnit</a>：由JUnit移植过来的C++测试框架</li><li><a href="http://www.cmake.org/cmake/help/v2.8.8/ctest.html" target="_blank" rel="noopener">CTest</a>：CMake测试驱动程序</li><li><a href="http://code.google.com/p/googletest/" target="_blank" rel="noopener">googletest</a>：谷歌C++测试框架</li><li><a href="https://github.com/deplinenoise/ig-debugheap" target="_blank" rel="noopener">ig-debugheap</a>：用于跟踪内存错误的多平台调试堆</li><li><a href="https://github.com/zorgnax/libtap" target="_blank" rel="noopener">libtap</a>：用C语言编写测试</li><li><a href="http://www.almostinfinite.com/memtrack.html" target="_blank" rel="noopener">MemTrack</a> —用于C++跟踪内存分配</li><li><a href="https://bitbucket.org/jonasmeyer/microprofile/overview" target="_blank" rel="noopener">microprofile</a>- 跨平台的网络试图分析器</li><li><a href="http://www.jera.com/techinfo/jtns/jtn002.html" target="_blank" rel="noopener">minUnit</a> ：使用C写的迷你单元测试框架，只使用了两个宏</li><li><a href="https://github.com/Celtoys/Remotery" target="_blank" rel="noopener">Remotery</a>：用于web视图的单一C文件分析器</li><li><a href="http://unittest-cpp.sourceforge.net/" target="_blank" rel="noopener">UnitTest++</a>：轻量级的C++单元测试框架</li></ul><h3 id="游戏引擎"><a href="#游戏引擎" class="headerlink" title="游戏引擎"></a><a name="t24" target="_blank"></a>游戏引擎</h3><ul><li><a href="http://www.cocos2d-x.org/" target="_blank" rel="noopener">Cocos2d-x</a> ：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。</li><li><a href="http://gritengine.com/" target="_blank" rel="noopener">Grit</a> ：社区项目，用于构建一个免费的游戏引擎，实现开放的世界3D游戏。</li><li><a href="http://irrlicht.sourceforge.net/" target="_blank" rel="noopener">Irrlicht</a> ：C++语言编写的开源高性能的实时#D引擎</li><li><a href="http://polycode.org/" target="_blank" rel="noopener">Polycode</a>：C++实现的用于创建游戏的开源框架（与Lua绑定）。</li></ul><h3 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a><a name="t25" target="_blank"></a>图形用户界面</h3><ul><li><a href="http://cegui.org.uk/" target="_blank" rel="noopener">CEGUI</a> ： 很灵活的跨平台GUI库</li><li><a href="http://www.fltk.org/index.php" target="_blank" rel="noopener">FLTK</a> ：快速，轻量级的跨平台的C++GUI工具包。</li><li><a href="http://www.gtk.org/" target="_blank" rel="noopener">GTK+</a>： 用于创建图形用户界面的跨平台工具包</li><li><a href="http://www.gtkmm.org/en/" target="_blank" rel="noopener">gtkmm</a> ：用于受欢迎的GUI库GTK+的官方C++接口。</li><li><a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">imgui</a>：拥有最小依赖关系的立即模式图形用户界面</li><li><a href="http://librocket.com/" target="_blank" rel="noopener">libRocket</a> ：<a href="http://librocket.com/" target="_blank" rel="noopener">libRocket</a> 是一个C++ HTML/CSS 游戏接口中间件</li><li><a href="http://mygui.info/" target="_blank" rel="noopener">MyGUI</a> ：快速，灵活，简单的GUI</li><li><a href="http://invisible-island.net/ncurses/" target="_blank" rel="noopener">Ncurses</a>：终端用户界面</li><li><a href="http://qcustomplot.com/" target="_blank" rel="noopener">QCustomPlot</a> ：没有更多依赖关系的Qt绘图控件</li><li><a href="http://qwt.sourceforge.net/" target="_blank" rel="noopener">Qwt</a> ：用户与技术应用的Qt 控件</li><li><a href="http://qwtplot3d.sourceforge.net/" target="_blank" rel="noopener">QwtPlot3D</a> ：功能丰富的基于Qt/OpenGL的C++编程库，本质上提供了一群3D控件</li><li><a href="https://github.com/Twolewis/OtterUI" target="_blank" rel="noopener">OtterUI</a> ：<a href="https://github.com/Twolewis/OtterUI" target="_blank" rel="noopener">OtterUI</a> 是用于嵌入式系统和互动娱乐软件的用户界面开发解决方案</li><li><a href="http://pdcurses.sourceforge.net/" target="_blank" rel="noopener">PDCurses</a> 包含源代码和预编译库的公共图形函数库</li><li><a href="http://wxwidgets.org/" target="_blank" rel="noopener">wxWidgets</a> C++库，允许开发人员使用一个代码库可以为widows， Mac OS X，Linux和其他平台创建应用程序</li></ul><h3 id="图形"><a href="#图形" class="headerlink" title="图形"></a><a name="t26" target="_blank"></a>图形</h3><ul><li><a href="https://github.com/bkaradzic/bgfx" target="_blank" rel="noopener">bgfx</a>：跨平台的渲染库</li><li><a href="http://www.cairographics.org/" target="_blank" rel="noopener">Cairo</a>：支持多种输出设备的2D图形库</li><li><a href="https://github.com/horde3d/Horde3D" target="_blank" rel="noopener">Horde3D</a> 一个小型的3D渲染和动画引擎</li><li><a href="https://github.com/mosra/magnum" target="_blank" rel="noopener">magnum</a> C++11和OpenGL 2D/3D 图形引擎</li><li><a href="http://www.ogre3d.org/" target="_blank" rel="noopener">Ogre 3D</a> 用C++编写的一个面向场景，实时，灵活的3D渲染引擎（并非游戏引擎）</li><li><a href="http://www.openscenegraph.org/" target="_blank" rel="noopener">OpenSceneGraph</a> 具有高性能的开源3D图形工具包</li><li><a href="http://www.panda3d.org/" target="_blank" rel="noopener">Panda3D</a> 用于3D渲染和游戏开发的框架，用Python和C++编写。</li><li><a href="https://github.com/google/skia" target="_blank" rel="noopener">Skia</a> 用于绘制文字，图形和图像的完整的2D图形库</li><li><a href="https://github.com/urho3d/Urho3D" target="_blank" rel="noopener">urho3d</a> 跨平台的渲染和游戏引擎。</li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a><a name="t27" target="_blank"></a>图像处理</h3><ul><li><a href="http://www.boost.org/doc/libs/1_56_0/libs/gil/doc/index.html" target="_blank" rel="noopener">Boost.GIL</a>：通用图像库</li><li><a href="http://cimg.sourceforge.net/" target="_blank" rel="noopener">CImg</a> ：用于图像处理的小型开源C++工具包</li><li><a href="http://www.xdp.it/cximage.htm" target="_blank" rel="noopener">CxImage</a> ：用于加载，保存，显示和转换的图像处理和转换库，可以处理的图片格式包括 BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K。</li><li><a href="http://freeimage.sourceforge.net/" target="_blank" rel="noopener">FreeImage</a> ：开源库，支持现在多媒体应用所需的通用图片格式和其他格式。</li><li><a href="http://gdcm.sourceforge.net/wiki/index.php/Main_Page" target="_blank" rel="noopener">GDCM</a>：Grassroots DICOM 库</li><li><a href="http://www.itk.org/" target="_blank" rel="noopener">ITK</a>：跨平台的开源图像分析系统</li><li><a href="http://www.imagemagick.org/script/api.php" target="_blank" rel="noopener">Magick++</a>：ImageMagick程序的C++接口</li><li><a href="http://www.imagemagick.org/script/api.php" target="_blank" rel="noopener">MagickWnd</a>：ImageMagick程序的C++接口</li><li><a href="http://opencv.org/" target="_blank" rel="noopener">OpenCV</a> ： 开源计算机视觉类库</li><li><a href="https://code.google.com/p/tesseract-ocr/" target="_blank" rel="noopener">tesseract-ocr</a>：OCR引擎</li><li><a href="https://github.com/ukoethe/vigra" target="_blank" rel="noopener">VIGRA</a> ：用于图像分析通用C++计算机视觉库</li><li><a href="http://www.vtk.org/" target="_blank" rel="noopener">VTK</a> ：用于3D计算机图形学，图像处理和可视化的开源免费软件系统。</li></ul><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a><a name="t28" target="_blank"></a>国际化</h3><ul><li><a href="http://www.gnu.org/software/gettext/" target="_blank" rel="noopener">gettext</a> ：GNU `gettext’</li><li><a href="http://site.icu-project.org/" target="_blank" rel="noopener">IBM ICU</a>：提供Unicode 和全球化支持的C、C++ 和Java库</li><li><a href="http://www.gnu.org/software/libiconv/" target="_blank" rel="noopener">libiconv</a> ：用于不同字符编码之间的编码转换库</li></ul><h3 id="Jason"><a href="#Jason" class="headerlink" title="Jason"></a><a name="t29" target="_blank"></a>Jason</h3><ul><li><a href="https://github.com/cesanta/frozen" target="_blank" rel="noopener">frozen</a> ： C/C++的Jason解析生成器</li><li><a href="https://github.com/akheron/jansson" target="_blank" rel="noopener">Jansson</a> ：进行编解码和处理Jason数据的C语言库</li><li><a href="https://github.com/chrismanning/jbson" target="_blank" rel="noopener">jbson</a> ：C++14中构建和迭代BSON data,和Json 文档的库</li><li><a href="https://github.com/jeaye/jeayeson" target="_blank" rel="noopener">JeayeSON</a>：非常健全的C++ JSON库，只包含头文件</li><li><a href="https://github.com/hjiang/jsonxx" target="_blank" rel="noopener">JSON++</a> ： C++ JSON 解析器</li><li><a href="https://github.com/udp/json-parser" target="_blank" rel="noopener">json-parser</a>：用可移植的ANSI C编写的JSON解析器，占用内存非常少</li><li><a href="https://github.com/dropbox/json11" target="_blank" rel="noopener">json11</a> ：一个迷你的C++11 JSON库</li><li><a href="https://github.com/amir-s/jute" target="_blank" rel="noopener">jute</a> ：非常简单的C++ JSON解析器</li><li><a href="https://github.com/vincenthz/libjson" target="_blank" rel="noopener">ibjson</a>：C语言中的JSON解析和打印库，很容易和任何模型集成。</li><li><a href="http://sourceforge.net/projects/libjson/" target="_blank" rel="noopener">libjson</a>：轻量级的JSON库</li><li><a href="https://github.com/kazuho/picojson" target="_blank" rel="noopener">PicoJSON</a>：C++中JSON解析序列化，只包含头文件</li><li><a href="https://github.com/gaudecker/qt-json" target="_blank" rel="noopener">qt-json</a> ：用于JSON数据和 QVariant层次间的相互解析的简单类</li><li><a href="https://github.com/flavio/qjson" target="_blank" rel="noopener">QJson</a>：将JSON数据映射到QVariant对象的基于Qt的库</li><li><a href="https://github.com/miloyip/rapidjson" target="_blank" rel="noopener">RapidJSON</a>： 用于C++的快速JSON 解析生成器，包含SAX和DOM两种风格的API</li><li><a href="https://github.com/lloyd/yajl" target="_blank" rel="noopener">YAJL</a> ：C语言中快速流JSON解析库</li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a><a name="t30" target="_blank"></a>日志</h3><ul><li><a href="http://www.boost.org/doc/libs/1_56_0/libs/log/doc/html/index.html" target="_blank" rel="noopener">Boost.Log</a> ：设计非常模块化，并且具有扩展性</li><li><a href="https://github.com/easylogging/easyloggingpp" target="_blank" rel="noopener">easyloggingpp</a>：C++日志库，只包含单一的头文件。</li><li><a href="http://log4cpp.sourceforge.net/" target="_blank" rel="noopener">Log4cpp</a> ：一系列C++类库，灵活添加日志到文件，系统日志，IDSA和其他地方。</li><li><a href="http://www.templog.org/" target="_blank" rel="noopener">templog</a>：轻量级C++库，可以添加日志到你的C++应用程序中</li></ul><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a><a name="t31" target="_blank"></a>机器学习</h3><ul><li><a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">Caffe</a> ：快速的神经网络框架</li><li><a href="https://github.com/liuliu/ccv" target="_blank" rel="noopener">CCV</a> ：以C语言为核心的现代计算机视觉库</li><li><a href="http://www.mlpack.org/" target="_blank" rel="noopener">mlpack</a> ：可扩展的C++机器学习库</li><li><a href="https://github.com/Itseez/opencv" target="_blank" rel="noopener">OpenCV</a>：开源计算机视觉库</li><li><a href="https://github.com/GHamrouni/Recommender" target="_blank" rel="noopener">Recommender</a>：使用协同过滤进行产品推荐/建议的C语言库。</li><li><a href="https://github.com/shogun-toolbox/shogun" target="_blank" rel="noopener">SHOGUN</a>：Shogun 机器学习工具</li><li><a href="https://code.google.com/p/sofia-ml/" target="_blank" rel="noopener">sofia-ml</a> ：用于机器学习的快速增量算法套件</li></ul><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a><a name="t32" target="_blank"></a>数学</h3><ul><li><a href="http://arma.sourceforge.net/" target="_blank" rel="noopener">Armadillo</a> ：高质量的C++线性代数库，速度和易用性做到了很好的平衡。语法和MatlAB很相似</li><li><a href="https://code.google.com/p/blaze-lib/" target="_blank" rel="noopener">blaze</a>：高性能的C++数学库，用于密集和稀疏算法。</li><li><a href="http://ceres-solver.org/" target="_blank" rel="noopener">ceres-solver</a> ：来自谷歌的C++库，用于建模和解决大型复杂非线性最小平方问题。</li><li><a href="http://www.cgal.org/" target="_blank" rel="noopener">CGal</a>： 高效，可靠的集合算法集合</li><li><a href="http://cmldev.net/" target="_blank" rel="noopener">cml</a> ：用于游戏和图形的免费C++数学库</li><li><a href="http://eigen.tuxfamily.org/" target="_blank" rel="noopener">Eigen</a> ：高级C++模板头文件库，包括线性代数，矩阵，向量操作，数值解决和其他相关的算法。</li><li><a href="http://ggt.sourceforge.net/" target="_blank" rel="noopener">GMTL</a>：数学图形模板库是一组广泛实现基本图形的工具。</li><li><a href="https://gmplib.org/" target="_blank" rel="noopener">GMP</a>：用于个高精度计算的C/C++库，处理有符号整数，有理数和浮点数。</li></ul><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a><a name="t33" target="_blank"></a>多媒体</h3><ul><li><a href="http://gstreamer.freedesktop.org/" target="_blank" rel="noopener">GStreamer</a> ：构建媒体处理组件图形的库</li><li><a href="http://www.live555.com/liveMedia/" target="_blank" rel="noopener">LIVE555 Streaming Media</a> ：使用开放标准协议(RTP/RTCP, RTSP, SIP) 的多媒体流库</li><li><a href="https://wiki.videolan.org/LibVLC" target="_blank" rel="noopener">libVLC</a> ：libVLC (VLC SDK)媒体框架</li><li><a href="https://github.com/wang-bin/QtAV" target="_blank" rel="noopener">QtAv</a>：基于Qt和FFmpeg的多媒体播放框架，能够帮助你轻而易举地编写出一个播放器</li><li><a href="http://www.libsdl.org/" target="_blank" rel="noopener">SDL</a> ：简单直控媒体层</li><li><a href="http://www.sfml-dev.org/" target="_blank" rel="noopener">SFML</a> ：快速，简单的多媒体库</li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a><a name="t34" target="_blank"></a>网络</h3><ul><li><a href="http://www.cs.wustl.edu/~schmidt/ACE.html" target="_blank" rel="noopener">ACE</a>：C++面向对象网络变成工具包</li><li><a href="http://think-async.com/" target="_blank" rel="noopener">Boost.Asio</a>：用于网络和底层I/O编程的跨平台的C++库</li><li><a href="http://casablanca.codeplex.com/" target="_blank" rel="noopener">Casablanca</a>：C++ REST SDK</li><li><a href="http://cpp-netlib.org/" target="_blank" rel="noopener">cpp-netlib</a>：高级网络编程的开源库集合</li><li><a href="https://github.com/rxi/dyad" target="_blank" rel="noopener">Dyad.c</a>：C语言的异步网络</li><li><a href="http://curl.haxx.se/libcurl/" target="_blank" rel="noopener">libcurl</a> :多协议文件传输库</li><li><a href="https://github.com/cesanta/mongoose" target="_blank" rel="noopener">Mongoose</a><span style="text-decoration:underline">：</span>非常轻量级的网络服务器</li><li><a href="https://github.com/chenshuo/muduo" target="_blank" rel="noopener">Muduo</a> ：用于Linux多线程服务器的C++非阻塞网络库</li><li><a href="https://github.com/cesanta/net_skeleton" target="_blank" rel="noopener">net_skeleton</a> ：C/C++的TCP 客户端/服务器库</li><li><a href="https://github.com/riolet/nope.c" target="_blank" rel="noopener">nope.c</a> ：基于C语言的超轻型软件平台，用于可扩展的服务器端和网络应用。 对于C编程人员，可以考虑node.js</li><li><a href="https://github.com/davidmoreno/onion" target="_blank" rel="noopener">Onion</a> :C语言HTTP服务器库，其设计为轻量级，易使用。</li><li><a href="https://github.com/pocoproject" target="_blank" rel="noopener">POCO</a>：用于构建网络和基于互联网应用程序的C++类库，可以运行在桌面，服务器，移动和嵌入式系统。</li><li><a href="https://github.com/OculusVR/RakNet" target="_blank" rel="noopener">RakNet</a>：为游戏开发人员提供的跨平台的开源C++网络引擎。</li><li><a href="https://github.com/vinipsmaker/tufao" target="_blank" rel="noopener">Tuf o</a> ：用于Qt之上的C++构建的异步Web框架。</li><li><a href="https://github.com/zaphoyd/websocketpp" target="_blank" rel="noopener">WebSocket++</a> ：基于C++/Boost Aiso的websocket 客户端/服务器库</li><li><a href="http://zeromq.org/" target="_blank" rel="noopener">ZeroMQ</a> ：高速，模块化的异步通信库</li></ul><h3 id="物理学"><a href="#物理学" class="headerlink" title="物理学"></a><a name="t35" target="_blank"></a>物理学</h3><p>动力学仿真引擎</p><ul><li><a href="https://code.google.com/p/box2d/" target="_blank" rel="noopener">Box2D</a>：2D的游戏物理引擎。</li><li><a href="https://github.com/bulletphysics/bullet3" target="_blank" rel="noopener">Bullet</a> ：3D的游戏物理引擎。</li><li><a href="https://github.com/slembcke/Chipmunk2D" target="_blank" rel="noopener">Chipmunk</a> ：快速，轻量级的2D游戏物理库</li><li><a href="https://github.com/google/liquidfun" target="_blank" rel="noopener">LiquidFun</a>：2D的游戏物理引擎</li><li><a href="http://www.ode.org/" target="_blank" rel="noopener">ODE</a> ：开放动力学引擎-开源，高性能库，模拟刚体动力学。</li><li><a href="https://github.com/vanderlin/ofxBox2d" target="_blank" rel="noopener">ofxBox2d</a>：Box2D开源框架包装器。</li><li><a href="https://github.com/simbody/simbody" target="_blank" rel="noopener">Simbody</a> ：高性能C++多体动力学/物理库，模拟关节生物力学和机械系统，像车辆，机器人和人体骨骼。</li></ul><h3 id="机器人学"><a href="#机器人学" class="headerlink" title="机器人学"></a><a name="t36" target="_blank"></a>机器人学</h3><ul><li><a href="http://moos-ivp.org/" target="_blank" rel="noopener">MOOS-IvP</a> ：一组开源C++模块，提供机器人平台的自主权，尤其是自主的海洋车辆。</li><li><a href="http://www.mrpt.org/" target="_blank" rel="noopener">MRPT</a>：移动机器人编程工具包</li><li><a href="https://github.com/PointCloudLibrary/pcl" target="_blank" rel="noopener">PCL</a> ：点云库是一个独立的，大规模的开放项目，用于2D/3D图像和点云处理。</li><li><a href="http://www.roboticslibrary.org/" target="_blank" rel="noopener">Robotics Library (RL)</a>： 一个独立的C++库，包括机器人动力学，运动规划和控制。</li><li><a href="http://www.robwork.dk/jrobwork/" target="_blank" rel="noopener">RobWork</a>：一组C++库的集合，用于机器人系统的仿真和控制。</li><li><a href="http://wiki.ros.org/" target="_blank" rel="noopener">ROS</a> ：机器人操作系统，提供了一些库和工具帮助软件开发人员创建机器人应用程序。</li></ul><h3 id="科学计算"><a href="#科学计算" class="headerlink" title="科学计算"></a><a name="t37" target="_blank"></a>科学计算</h3><ul><li><a href="http://www.fftw.org/" target="_blank" rel="noopener">FFTW</a> :用一维或者多维计算DFT的C语言库。</li><li><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL</a>：GNU科学库。</li></ul><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a><a name="t38" target="_blank"></a>脚本</h3><ul><li><a href="https://github.com/ChaiScript/ChaiScript/" target="_blank" rel="noopener">ChaiScript</a> ：用于C++的易于使用的嵌入式脚本语言。</li><li><a href="http://www.lua.org/" target="_blank" rel="noopener">Lua</a> ：用于配置文件和基本应用程序脚本的小型快速脚本引擎。</li><li><a href="https://github.com/dafrito/luacxx" target="_blank" rel="noopener">luacxx</a>：用于创建Lua绑定的C++ 11 API</li><li><a href="http://www.swig.org/" target="_blank" rel="noopener">SWIG</a> ：一个可以让你的C++代码链接到JavaScript，Perl，PHP，Python，Tcl和Ruby的包装器/接口生成器</li><li><a href="https://github.com/cesanta/v7" target="_blank" rel="noopener">V7</a>：嵌入式的JavaScript 引擎。</li><li><a href="http://code.google.com/p/v8/" target="_blank" rel="noopener">V8</a> ：谷歌的快速JavaScript引擎，可以被嵌入到任何C++应用程序中。</li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a><a name="t39" target="_blank"></a>序列化</h3><ul><li><a href="http://kentonv.github.io/capnproto/" target="_blank" rel="noopener">Cap’n Proto</a> ：快速数据交换格式和RPC系统。</li><li><a href="https://github.com/USCiLab/cereal" target="_blank" rel="noopener">cereal</a> ：C++11 序列化库</li><li><a href="https://github.com/google/flatbuffers" target="_blank" rel="noopener">FlatBuffers</a> ：内存高效的序列化库</li><li><a href="https://github.com/msgpack/msgpack-c" target="_blank" rel="noopener">MessagePack</a> ：C/C++的高效二进制序列化库，例如 JSON</li><li><a href="http://code.google.com/p/protobuf/" target="_blank" rel="noopener">protobuf</a> ：协议缓冲，谷歌的数据交换格式。</li><li><a href="https://github.com/protobuf-c/protobuf-c" target="_blank" rel="noopener">protobuf-c</a> ：C语言的协议缓冲实现</li><li><a href="https://github.com/real-logic/simple-binary-encoding" target="_blank" rel="noopener">SimpleBinaryEncoding</a>：用于低延迟应用程序的对二进制格式的应用程序信息的编码和解码。</li><li><a href="https://thrift.apache.org/" target="_blank" rel="noopener">Thrift</a> ：高效的跨语言IPC/RPC，用于C++，Java，Python，PHP，C#和其它多种语言中，最初由Twitter开发。</li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a><a name="t40" target="_blank"></a>视频</h3><ul><li><a href="http://www.webmproject.org/code/" target="_blank" rel="noopener">libvpx</a> ：VP8/VP9编码解码SDK</li><li><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> ：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流。</li><li><a href="https://github.com/strukturag/libde265" target="_blank" rel="noopener">libde265</a> ：开放的h.265视频编解码器的实现。</li><li><a href="https://github.com/cisco/openh264" target="_blank" rel="noopener">OpenH264</a>：开源H.364 编解码器。</li><li><a href="http://www.theora.org/" target="_blank" rel="noopener">Theora</a> ：免费开源的视频压缩格式。</li></ul><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a><a name="t41" target="_blank"></a>虚拟机</h3><ul><li><a href="https://github.com/tekknolagi/carp" target="_blank" rel="noopener">CarpVM</a>：C中有趣的VM，让我们一起来看看这个。</li><li><a href="https://github.com/micropython/micropython" target="_blank" rel="noopener">MicroPython</a> ：旨在实现单片机上Python3.x的实现</li><li><a href="https://github.com/jakogut/tinyvm" target="_blank" rel="noopener">TinyVM</a>：用纯粹的ANSI C编写的小型，快速，轻量级的虚拟机。</li></ul><h3 id="Web应用框架"><a href="#Web应用框架" class="headerlink" title="Web应用框架"></a><a name="t42" target="_blank"></a>Web应用框架</h3><ul><li><a href="https://github.com/bel2125/civetweb" target="_blank" rel="noopener">Civetweb</a> ：提供易于使用，强大的，C/C++嵌入式Web服务器，带有可选的CGI，SSL和Lua支持。</li><li><a href="http://cppcms.com/" target="_blank" rel="noopener">CppCMS</a> ：免费高性能的Web开发框架（不是 CMS）.</li><li><a href="https://github.com/ipkn/crow" target="_blank" rel="noopener">Crow</a> ：一个C++微型web框架（灵感来自于Python Flask）</li><li><a href="https://kore.io/" target="_blank" rel="noopener">Kore</a> :使用C语言开发的用于web应用程序的超快速和灵活的web服务器/框架。</li><li><a href="http://www.coralbits.com/libonion/" target="_blank" rel="noopener">libOnion</a>：轻量级的库，帮助你使用C编程语言创建web服务器。</li><li><a href="https://github.com/jlaine/qdjango/" target="_blank" rel="noopener">QDjango</a>：使用C++编写的，基于Qt库的web框架，试图效仿Django API，因此得此名。</li><li><a href="http://www.webtoolkit.eu/wt" target="_blank" rel="noopener">Wt</a> ：开发Web应用的C++库。</li></ul><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a><a name="t43" target="_blank"></a>XML</h3><p>XML就是个垃圾，xml的解析很烦人，对于计算机它也是个灾难。这种糟糕的东西完全没有存在的理由了。-Linus Torvalds</p><ul><li><a href="http://www.libexpat.org/" target="_blank" rel="noopener">Expat</a> ：用C语言编写的xml解析库</li><li><a href="http://xmlsoft.org/" target="_blank" rel="noopener">Libxml2</a> ：Gnome的xml C解析器和工具包</li><li><a href="http://libxmlplusplus.sourceforge.net/" target="_blank" rel="noopener">libxml++</a> ：C++的xml解析器</li><li><a href="http://pugixml.org/" target="_blank" rel="noopener">PugiXML</a> ：用于C++的，支持XPath的轻量级，简单快速的XML解析器。</li><li><a href="http://rapidxml.sourceforge.net/" target="_blank" rel="noopener">RapidXml</a> ：试图创建最快速的XML解析器，同时保持易用性，可移植性和合理的W3C兼容性。</li><li><a href="http://sourceforge.net/projects/tinyxml/" target="_blank" rel="noopener">TinyXML</a> ：简单小型的C++XML解析器，可以很容易地集成到其它项目中。</li><li><a href="https://github.com/leethomason/tinyxml2" target="_blank" rel="noopener">TinyXML2</a>：简单快速的C++CML解析器，可以很容易集成到其它项目中。</li><li><a href="https://code.google.com/p/ticpp/" target="_blank" rel="noopener">TinyXML++</a>：TinyXML的一个全新的接口，使用了C++的许多许多优势，模板，异常和更好的异常处理。</li><li><a href="http://xerces.apache.org/xerces-c/" target="_blank" rel="noopener">Xerces-C++</a> ：用可移植的C++的子集编写的XML验证解析器。</li></ul><h3 id="多项混杂"><a href="#多项混杂" class="headerlink" title="多项混杂"></a><a name="t44" target="_blank"></a>多项混杂</h3><p>一些有用的库或者工具，但是不适合上面的分类，或者还没有分类。</p><ul><li><a href="https://github.com/cppformat/cppformat" target="_blank" rel="noopener">C++ Format</a> ：C++的小型，安全和快速格式化库</li><li><a href="https://code.google.com/p/casacore/" target="_blank" rel="noopener">casacore</a> ：从aips++ 派生的一系列C++核心库</li><li><a href="https://github.com/louisdx/cxx-prettyprint" target="_blank" rel="noopener">cxx-prettyprint</a>：用于C++容器的打印库</li><li><a href="http://www.dynaforms.com/" target="_blank" rel="noopener">DynaPDF</a> ：易于使用的PDF生成库</li><li><a href="https://github.com/leafsr/gcc-poison" target="_blank" rel="noopener">gcc-poison</a> ：帮助开发人员禁止应用程序中的不安全的C/C++函数的简单的头文件。</li><li><a href="http://code.google.com/p/googlemock/" target="_blank" rel="noopener">googlemock</a>：编写和使用C++模拟类的库</li><li><a href="https://github.com/joyent/http-parser" target="_blank" rel="noopener">HTTP Parser</a> ：C的http请求/响应解析器</li><li><a href="https://github.com/anrieff/libcpuid" target="_blank" rel="noopener">libcpuid</a> ：用于x86 CPU检测盒特征提取的小型C库</li><li><a href="https://github.com/avati/libevil" target="_blank" rel="noopener">libevil</a> ：许可证管理器</li><li><a href="http://www.libusb.org/" target="_blank" rel="noopener">libusb</a>：允许移动访问USB设备的通用USB库</li><li><a href="http://pcre.org/" target="_blank" rel="noopener">PCRE</a>：正则表达式C库，灵感来自于Perl中正则表达式的功能。</li><li><a href="http://www.deltavsoft.com/" target="_blank" rel="noopener">Remote Call Framework</a> ：C++的进程间通信框架。</li><li><a href="http://scintilla.org/" target="_blank" rel="noopener">Scintilla</a> ：开源的代码编辑控件</li><li><a href="https://github.com/wjwwood/serial" target="_blank" rel="noopener">Serial Communication Library</a> ：C++语言编写的跨平台，串口库。</li><li><a href="https://github.com/antirez/sds" target="_blank" rel="noopener">SDS</a>：C的简单动态字符串库</li><li><a href="https://github.com/cesanta/sldr" target="_blank" rel="noopener">SLDR</a> ：超轻的DNS解析器</li><li><a href="https://github.com/cesanta/slre" target="_blank" rel="noopener">SLRE</a>： 超轻的正则表达式库</li><li><a href="https://github.com/rtv/Stage" target="_blank" rel="noopener">Stage</a> ：移动机器人模拟器</li><li><a href="https://code.google.com/p/vartypes/" target="_blank" rel="noopener">VarTypes</a>：C++/Qt4功能丰富，面向对象的管理变量的框架。</li><li><a href="http://zbar.sourceforge.net/" target="_blank" rel="noopener">ZBar</a>：‘条形码扫描器’库，可以扫描照片，图片和视频流中的条形码，并返回结果。</li><li><a href="https://github.com/VerbalExpressions/CppVerbalExpressions" target="_blank" rel="noopener">CppVerbalExpressions</a> ：易于使用的C++正则表达式</li><li><a href="https://github.com/VerbalExpressions/QtVerbalExpressions" target="_blank" rel="noopener">QtVerbalExpressions</a>：基于C++ VerbalExpressions 库的Qt库</li><li><a href="https://github.com/CopernicaMarketingSoftware/PHP-CPP" target="_blank" rel="noopener">PHP-CPP</a>：使用C++来构建PHP扩展的库</li><li><a href="http://bstring.sourceforge.net/" target="_blank" rel="noopener">Better String</a> ：C的另一个字符串库，功能更丰富，但是没有缓冲溢出问题，还包含了一个C++包装器。</li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a><a name="t45" target="_blank"></a>软件</h3><p>用于创建开发环境的软件</p><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a><a name="t46" target="_blank"></a>编译器</h3><p>C/C++编译器列表</p><ul><li><a href="http://clang.llvm.org/" target="_blank" rel="noopener">Clang</a> :由苹果公司开发的</li><li><a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC</a>：GNU编译器集合</li><li><a href="https://software.intel.com/en-us/c-compilers" target="_blank" rel="noopener">Intel C++ Compiler</a> ：由英特尔公司开发</li><li><a href="http://llvm.org/" target="_blank" rel="noopener">LLVM</a> ：模块化和可重用编译器和工具链技术的集合</li><li><a href="http://msdn.microsoft.com/en-us/vstudio/hh386302.aspx" target="_blank" rel="noopener">Microsoft Visual C++</a> ：MSVC，由微软公司开发</li><li><a href="http://www.openwatcom.org/index.php/Main_Page" target="_blank" rel="noopener">Open WatCom</a> ：Watcom，C，C++和Fortran交叉编译器和工具</li><li><a href="http://bellard.org/tcc/" target="_blank" rel="noopener">TCC</a> ：轻量级的C语言编译器</li></ul><h3 id="在线编译器"><a href="#在线编译器" class="headerlink" title="在线编译器"></a><a name="t47" target="_blank"></a>在线编译器</h3><p>在线C/C++编译器列表</p><ul><li><a href="http://codepad.org/" target="_blank" rel="noopener">codepad</a> ：在线编译器/解释器，一个简单的协作工具</li><li><a href="http://codetwist.com/" target="_blank" rel="noopener">CodeTwist</a>：一个简单的在线编译器/解释器，你可以粘贴的C,C++或者Java代码，在线执行并查看结果</li><li><a href="http://coliru.stacked-crooked.com/" target="_blank" rel="noopener">coliru</a> ：在线编译器/shell， 支持各种C++编译器</li><li><a href="http://gcc.godbolt.org/" target="_blank" rel="noopener">Compiler Explorer</a>：交互式编译器，可以进行汇编输出</li><li><a href="http://www.compileonline.com/compile_cpp11_online.php" target="_blank" rel="noopener">CompileOnline</a>：Linux上在线编译和执行C++程序</li><li><a href="http://ideone.com/" target="_blank" rel="noopener">Ideone</a> ：一个在线编译器和调试工具，允许你在线编译源代码并执行，支持60多种编程语言。</li></ul><h3 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a><a name="t48" target="_blank"></a>调试器</h3><p>C/C++调试器列表</p><ul><li><a href="http://en.wikipedia.org/wiki/Comparison_of_debuggers" target="_blank" rel="noopener">Comparison of debuggers</a> ：来自维基百科的调试器列表</li><li><a href="https://www.gnu.org/software/gdb" target="_blank" rel="noopener">GDB</a> ：GNU调试器</li><li><a href="http://valgrind.org/" target="_blank" rel="noopener">Valgrind</a>：内存调试，内存泄露检测，性能分析工具。</li></ul><h3 id="集成开发环境（IDE）"><a href="#集成开发环境（IDE）" class="headerlink" title="集成开发环境（IDE）"></a><a name="t49" target="_blank"></a>集成开发环境（IDE）</h3><p>C/C++集成开发环境列表</p><ul><li><a href="http://www.jetbrains.com/objc/" target="_blank" rel="noopener">AppCode</a> ：构建与JetBrains’ IntelliJ IDEA 平台上的用于Objective-C，C,C++，Java和Java开发的集成开发环境</li><li><a href="http://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a>：来自JetBrains的跨平台的C/C++的集成开发环境</li><li><a href="http://www.codeblocks.org/" target="_blank" rel="noopener">Code::Blocks</a> ：免费C，C++和Fortran的集成开发环境</li><li><a href="http://codelite.org/" target="_blank" rel="noopener">CodeLite</a> ：另一个跨平台的免费的C/C++集成开发环境</li><li><a href="http://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">Dev-C++</a>：可移植的C/C++/C++11集成开发环境</li><li><a href="http://www.eclipse.org/cdt/" target="_blank" rel="noopener">Eclipse CDT</a>：基于Eclipse平台的功能齐全的C和C++集成开发环境</li><li><a href="http://www.geany.org/" target="_blank" rel="noopener">Geany</a> ：轻量级的快速，跨平台的集成开发环境。</li><li><a href="http://www-03.ibm.com/software/products/en/visgen" target="_blank" rel="noopener">IBM VisualAge</a> ：来自IBM的家庭计算机集成开发环境。</li><li><a href="https://github.com/Sarcasm/irony-mode" target="_blank" rel="noopener">Irony-mode</a>：由libclang驱动的用于Emacs的C/C++微模式</li><li><a href="https://www.kdevelop.org/" target="_blank" rel="noopener">KDevelop</a>：免费开源集成开发环境</li><li><a href="http://www.visualstudio.com/" target="_blank" rel="noopener">Microsoft Visual Studio</a> ：来自微软的集成开发环境</li><li><a href="https://netbeans.org/" target="_blank" rel="noopener">NetBeans</a> ：主要用于Java开发的的集成开发环境，也支持其他语言，尤其是PHP，C/C++和HTML5。</li><li><a href="http://qt-project.org/" target="_blank" rel="noopener">Qt Creator</a>：跨平台的C++，Javascript和QML集成开发环境，也是Qt SDK的一部分。</li><li><a href="https://github.com/Andersbakken/rtags" target="_blank" rel="noopener">rtags</a>：C/C++的客户端服务器索引，用于 跟基于clang的emacs的集成</li><li><a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> ：由苹果公司开发</li><li><a href="https://valloric.github.io/YouCompleteMe/" target="_blank" rel="noopener">YouCompleteMe</a>：一个用于Vim的根据你敲的代码快速模糊搜索并进行代码补全的引擎。</li></ul><h3 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a><a name="t50" target="_blank"></a>构建系统</h3><ul><li><a href="https://github.com/rizsotto/Bear" target="_blank" rel="noopener">Bear</a> ：用于为clang工具生成编译数据库的工具</li><li><a href="https://www.biicode.com/" target="_blank" rel="noopener">Biicode</a>：基于文件的简单依赖管理器。</li><li><a href="http://www.cmake.org/" target="_blank" rel="noopener">CMake</a> ：跨平台的免费开源软件用于管理软件使用独立编译的方法进行构建的过程。</li><li><a href="https://github.com/iauns/cpm" target="_blank" rel="noopener">CPM</a>：基于CMake和Git的C++包管理器</li><li><a href="http://www.fastbuild.org/docs/home.html" target="_blank" rel="noopener">FASTBuild</a>：高性能，开源的构建系统，支持高度可扩展性的编译，缓冲和网络分布。</li><li><a href="http://martine.github.io/ninja/" target="_blank" rel="noopener">Ninja</a> ：专注于速度的小型构建系统</li><li><a href="http://www.scons.org/" target="_blank" rel="noopener">Scons</a> ：使用Python scipt 配置的软件构建工具</li><li><a href="https://github.com/deplinenoise/tundra" target="_blank" rel="noopener">tundra</a> ：高性能的代码构建系统，甚至对于非常大型的软件项目，也能提供最好的增量构建次数。</li><li><a href="http://gittup.org/tup/" target="_blank" rel="noopener">tup</a>：基于文件的构建系统，用于后台监控变化的文件。</li></ul><h3 id="静态代码分析"><a href="#静态代码分析" class="headerlink" title="静态代码分析"></a><a name="t51" target="_blank"></a>静态代码分析</h3><p>提高质量，减少瑕疵的代码分析工具列表</p><ul><li><a href="http://cppcheck.sourceforge.net/" target="_blank" rel="noopener">Cppcheck</a> ：静态C/C++代码分析工具</li><li><a href="https://code.google.com/p/include-what-you-use/" target="_blank" rel="noopener">include-what-you-use</a> ：使用clang进行代码分析的工具，可以#include在C和C++文件中。</li><li><a href="http://oclint.org/" target="_blank" rel="noopener">OCLint</a> ：用于C，C++和Objective-C的静态源代码分析工具，用于提高质量，减少瑕疵。</li><li><a href="http://clang-analyzer.llvm.org/index.html" target="_blank" rel="noopener">Clang Static Analyzer</a>：查找C，C++和Objective-C程序bug的源代码分析工具</li><li><a href="http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2FC.2B.2B" target="_blank" rel="noopener">List of tools for static code analysis</a> ：来自维基百科的静态代码分析工具列表</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章出处：&lt;a href=&quot;http://blog.csdn.net/xiaoxiaoyeyaya/article/details/42541419&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/xiaoxiaoyeyaya/article/details/42541419&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Webbench&quot;&gt;&lt;a href=&quot;#1-Webbench&quot; class=&quot;headerlink&quot; title=&quot;- 1. Webbench&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t1&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 1. Webbench&lt;/h2&gt;&lt;p&gt;Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。Webbench使用C语言编写, 代码实在太简洁，源码加起来不到600行。&lt;/p&gt;
&lt;p&gt;下载链接：&lt;a href=&quot;http://home.tiscali.cz/~cz210552/webbench.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://home.tiscali.cz/~cz210552/webbench.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-Tinyhttpd&quot;&gt;&lt;a href=&quot;#2-Tinyhttpd&quot; class=&quot;headerlink&quot; title=&quot;- 2. Tinyhttpd&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t2&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 2. Tinyhttpd&lt;/h2&gt;&lt;p&gt;tinyhttpd是一个超轻量型Http Server，使用C语言开发，全部代码只有502行(包括注释)，附带一个简单的Client，可以通过阅读这段代码理解一个 Http Server 的本质。&lt;/p&gt;
&lt;p&gt;下载链接：&lt;a href=&quot;http://sourceforge.net/projects/tinyhttpd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://sourceforge.net/projects/tinyhttpd/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-cJSON&quot;&gt;&lt;a href=&quot;#3-cJSON&quot; class=&quot;headerlink&quot; title=&quot;- 3. cJSON&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t3&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 3. cJSON&lt;/h2&gt;&lt;p&gt;cJSON是C语言中的一个JSON编解码器，非常轻量级，C文件只有500多行，速度也非常理想。&lt;/p&gt;
&lt;p&gt;cJSON也存在几个弱点，虽然功能不是非常强大，但cJSON的小身板和速度是最值得赞赏的。其代码被非常好地维护着，结构也简单易懂，可以作为一个非常好的C语言项目进行学习。&lt;/p&gt;
&lt;p&gt;项目主页:&lt;a href=&quot;http://sourceforge.net/projects/cjson/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://sourceforge.net/projects/cjson/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-CMockery&quot;&gt;&lt;a href=&quot;#4-CMockery&quot; class=&quot;headerlink&quot; title=&quot;- 4. CMockery&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t4&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 4. CMockery&lt;/h2&gt;&lt;p&gt;cmockery是google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。cmockery的源代码行数不到3K，你阅读一下will_return和mock的源代码就一目了然了。&lt;/p&gt;
&lt;p&gt;主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;免费且开源，google提供技术支持；&lt;/li&gt;
&lt;li&gt;轻量级的框架，使测试更加快速简单；&lt;/li&gt;
&lt;li&gt;避免使用复杂的编译器特性，对老版本的编译器来讲，兼容性好;&lt;/li&gt;
&lt;li&gt;并不强制要求待测代码必须依赖C99标准，这一特性对许多嵌入式系统的开发很有用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载链接：&lt;a href=&quot;http://code.google.com/p/cmockery/downloads/list&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://code.google.com/p/cmockery/downloads/list&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-Libev&quot;&gt;&lt;a href=&quot;#5-Libev&quot; class=&quot;headerlink&quot; title=&quot;- 5. Libev&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t5&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 5. Libev&lt;/h2&gt;&lt;p&gt;libev是一个开源的事件驱动库，基于epoll，kqueue等OS提供的基础设施。其以高效出名，它可以将IO事件，定时器，和信号统一起来，统一放在事件处理这一套框架下处理。基于Reactor模式，效率较高，并且代码精简（4.15版本8000多行），是学习事件驱动编程的很好的资源。&lt;/p&gt;
&lt;p&gt;下载链接：&lt;a href=&quot;http://software.schmorp.de/pkg/libev.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://software.schmorp.de/pkg/libev.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-Memcached&quot;&gt;&lt;a href=&quot;#6-Memcached&quot; class=&quot;headerlink&quot; title=&quot;- 6. Memcached&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t6&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 6. Memcached&lt;/h2&gt;&lt;p&gt;Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态数据库驱动网站的速度。Memcached 基于一个存储键/值对的 hashmap。Memcached-1.4.7的代码量还是可以接受的，只有10K行左右。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://memcached.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://memcached.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-Lua&quot;&gt;&lt;a href=&quot;#7-Lua&quot; class=&quot;headerlink&quot; title=&quot;- 7. Lua&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t7&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 7. Lua&lt;/h2&gt;&lt;p&gt;Lua很棒，Lua是巴西人发明的，这些都令我不爽，但是还不至于脸红，最多眼红。&lt;/p&gt;
&lt;p&gt;让我脸红的是Lua的源代码，百分之一百的ANSI C，一点都不掺杂。在任何支持ANSI C编译器的平台上都可以轻松编译通过。我试过，真是一点废话都没有。Lua的代码数量足够小，5.1.4仅仅1.5W行，去掉空白行和注释估计能到1W行。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://www.lua.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.lua.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;8-SQLite&quot;&gt;&lt;a href=&quot;#8-SQLite&quot; class=&quot;headerlink&quot; title=&quot;- 8. SQLite&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t8&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 8. SQLite&lt;/h2&gt;&lt;p&gt;SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大致3万行C代码，250K。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://www.sqlite.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sqlite.org/&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;9-UNIX-v6&quot;&gt;&lt;a href=&quot;#9-UNIX-v6&quot; class=&quot;headerlink&quot; title=&quot;- 9. UNIX v6&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t9&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 9. UNIX v6&lt;/h2&gt;&lt;p&gt;UNIX V6 的内核源代码包括设备驱动程序在内 约有1 万行，这个数量的源代码，初学者是能够充分理解的。有一种说法是一个人所能理解的代码量上限为1 万行，UNIX V6的内核源代码从数量上看正好在这个范围之内。看到这里，大家是不是也有“如果只有1万行的话没准儿我也能学会”的想法呢？&lt;/p&gt;
&lt;p&gt;另一方面，最近的操作系统，例如Linux 最新版的内核源代码据说超过了1000 万行。就算不是初学者，想完全理解全部代码基本上也是不可能的。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;10-NETBSD&quot;&gt;&lt;a href=&quot;#10-NETBSD&quot; class=&quot;headerlink&quot; title=&quot;- 10. NETBSD&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t10&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;- 10. NETBSD&lt;/h2&gt;&lt;p&gt;NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统，可以在许多平台上执行，从 64bit alpha 服务器到手持设备和嵌入式设备。NetBSD计划的口号是：”Of course it runs NetBSD”。它设计简洁，代码规范，拥有众多先进特性，使得它在业界和学术界广受好评。由于简洁的设计和先进的特征，使得它在生产和研究方面，都有卓越的表现，而且它也有受使用者支持的完整的源代码。许多程序都可以很容易地通过NetBSD Packages Collection获得。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://www.netbsd.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.netbsd.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://erhua.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://erhua.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本如何调用JAVA函数</title>
    <link href="https://erhua.github.io/2017/09/15/lua-call-java/"/>
    <id>https://erhua.github.io/2017/09/15/lua-call-java/</id>
    <published>2017-09-15T11:01:49.000Z</published>
    <updated>2019-03-19T12:37:11.035Z</updated>
    
    <content type="html"><![CDATA[<p>正文待添加</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正文待添加&lt;/p&gt;

      
    
    </summary>
    
      <category term="JAVA语言" scheme="https://erhua.github.io/categories/JAVA%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Lua" scheme="https://erhua.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>父子雄兵影评</title>
    <link href="https://erhua.github.io/2017/09/10/%E8%A7%82%E5%BD%B1%E5%BD%B1%E8%AF%84/"/>
    <id>https://erhua.github.io/2017/09/10/观影影评/</id>
    <published>2017-09-10T04:17:50.000Z</published>
    <updated>2019-03-19T12:37:11.033Z</updated>
    
    <content type="html"><![CDATA[<p>不吹不黑地说这部电影很一般，不管是情节还是搞笑，都远远赶不上大鹏的煎饼侠，不过范伟老师的演技还是很棒的。尽管整部影片很一般，但当影片最后《老爸》这首歌响起的时候，还是能够勾起人们很多的回忆，特别是那种深深的父子情。<br><img src="https://erhua.github.io/resource/fuzixiongbing.jpg" alt="父子雄兵"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不吹不黑地说这部电影很一般，不管是情节还是搞笑，都远远赶不上大鹏的煎饼侠，不过范伟老师的演技还是很棒的。尽管整部影片很一般，但当影片最后《老爸》这首歌响起的时候，还是能够勾起人们很多的回忆，特别是那种深深的父子情。&lt;br&gt;&lt;img src=&quot;https://erhua.gi
      
    
    </summary>
    
      <category term="生活娱乐" scheme="https://erhua.github.io/categories/%E7%94%9F%E6%B4%BB%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="movie" scheme="https://erhua.github.io/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>云南之旅</title>
    <link href="https://erhua.github.io/2016/10/10/%E4%BA%91%E5%8D%97%E4%B9%8B%E6%97%85/"/>
    <id>https://erhua.github.io/2016/10/10/云南之旅/</id>
    <published>2016-10-09T16:00:18.000Z</published>
    <updated>2019-03-19T12:37:11.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="香格里拉"><a href="#香格里拉" class="headerlink" title="香格里拉"></a>香格里拉</h2><p><img src="/resource/yunnan/IMG_9334.JPG" alt><br><img src="/resource/yunnan/IMG_9428.JPG" alt><br><img src="/resource/yunnan/IMG_9444.JPG" alt><br><img src="/resource/yunnan/IMG_9472.JPG" alt><br><img src="/resource/yunnan/IMG_9540.JPG" alt><br>可爱的小松鼠<br><img src="/resource/yunnan/IMG_9618.JPG" alt><br><img src="/resource/yunnan/IMG_9625.JPG" alt><br><img src="/resource/yunnan/IMG_9686.JPG" alt><br><img src="/resource/yunnan/IMG_9729.JPG" alt> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;香格里拉&quot;&gt;&lt;a href=&quot;#香格里拉&quot; class=&quot;headerlink&quot; title=&quot;香格里拉&quot;&gt;&lt;/a&gt;香格里拉&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/resource/yunnan/IMG_9334.JPG&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/re
      
    
    </summary>
    
      <category term="生活娱乐" scheme="https://erhua.github.io/categories/%E7%94%9F%E6%B4%BB%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="旅行" scheme="https://erhua.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Python封装的一个简单LOG类</title>
    <link href="https://erhua.github.io/2016/10/10/python%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E7%B1%BB/"/>
    <id>https://erhua.github.io/2016/10/10/python日志打印类/</id>
    <published>2016-10-09T16:00:18.000Z</published>
    <updated>2019-03-19T12:37:11.034Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.m_Logger = logging.getLogger()</span><br><span class="line">        self.m_Logger.setLevel(logging.NOTSET)</span><br><span class="line">        self.m_Formatter = logging.Formatter(<span class="string">"[%(asctime)s]|%(levelname)s|%(process)d|%(thread)d|%(filename)s|%(lineno)s|%(funcName)s|%(message)s"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 默认先输出到控制台</span></span><br><span class="line">        tHandler = logging.StreamHandler(sys.stdout)</span><br><span class="line">        tHandler.setFormatter(self.m_Formatter)</span><br><span class="line">        self.m_Logger.addHandler(tHandler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Load</span><span class="params">(self, strPath, strLogLevel, iLogCount)</span>:</span></span><br><span class="line">        mapLevel = &#123;<span class="string">"debug"</span>: logging.DEBUG, <span class="string">"normal"</span>: logging.INFO, <span class="string">"warning"</span>: logging.WARNING, <span class="string">"error"</span>: logging.ERROR&#125;</span><br><span class="line">        iLevel = mapLevel.get(strLogLevel, logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        tHandler = logging.handlers.TimedRotatingFileHandler(filename=strPath, when=<span class="string">"midnight"</span>, backupCount=iLogCount, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">        tHandler.setFormatter(self.m_Formatter)</span><br><span class="line">        tHandler.setLevel(iLevel)</span><br><span class="line"></span><br><span class="line">        self.m_Logger.addHandler(tHandler)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Debug</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.m_Logger.debug</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Normal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.m_Logger.info</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Warning</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.m_Logger.warning</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Error</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.m_Logger.error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gLogger = CLog()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 使用演示</span></span><br><span class="line"><span class="string">if __name__ == "__main__":</span></span><br><span class="line"><span class="string">    gLogger.Load("test.log","debug",0)</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        doSomething()</span></span><br><span class="line"><span class="string">    except Exception, args:</span></span><br><span class="line"><span class="string">        gLogger.Error(args, exc_info=True)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python语言" scheme="https://erhua.github.io/categories/Python%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>100个GDB小技巧</title>
    <link href="https://erhua.github.io/2015/09/07/100-gdb-tips/"/>
    <id>https://erhua.github.io/2015/09/07/100-gdb-tips/</id>
    <published>2015-09-07T08:57:13.000Z</published>
    <updated>2019-03-19T12:37:11.034Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://erhua.github.io/resource/100-gdb-tips.html">阅读全文…</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://erhua.github.io/resource/100-gdb-tips.html&quot;&gt;阅读全文…&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="调试工具" scheme="https://erhua.github.io/categories/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gdb-tip" scheme="https://erhua.github.io/tags/gdb-tip/"/>
    
  </entry>
  
</feed>
